1. How much faster was the by-row access of the rectangular array than the by-column when your array fits in L1 cache? (Compare the worst case of each.)
From the given results, we can see that the by-row access is consistently faster than the by-column access for all array sizes. 
The difference in speed can be observed by comparing the elapsed time for the same array size; For example, in the case of a 5120000-element array, the by-row access took 8.09 ms,
while the by-column access took 5.44 ms. Therefore, the by-row access was approximately 1.5 times slower than the by-column access.

2. How does the performance of the by-column summation change as the array gets larger than the caches?
As the array size increases beyond the size of the caches, the performance of by-column summation tends to degrade. 
The time taken for the by-column access increases with larger array sizes.
For smaller array sizes that fit in the caches, the by-column access is relatively fast, with consistent timings around 5-6 ms.
However, as the array size grows beyond the cache size, the by-column access takes more time, and the timings increase accordingly. 
meaning the cache misses become more frequent, resulting in slower memory access.

3. Your experience likely matches mine: for large arrays, the by-column summation of an array with a small height (â‰ˆsingle-digits) is consistently slower than a small width. Why do you think that is?
It's the cache, and it becomes slower in the middle(L2?), but it catches up the speed again later. 
This is likely due to the way data is accessed in memory, which causes more cache misses due to non-contiguous memory access, resulting in slower performance for the by column summation.

4. Did avoiding the branch with a conditional move speed up the hailstone length calculation? By how much? How did the C code compare? [I believe this is a very rare case where our assembly can slightly beat gcc -O3. Sadly, clang -O3 still beats my times.]
by using a conditional move (cmov), it has improved performance by approximately 19 ms over C implementation, and 21 ms over initial assembly implementation. 



column:
Array size: 40000 kB
Calculated -42.7861 in     5.21 ms on 1*5120000 array.
Calculated -42.7861 in     5.78 ms on 2*2560000 array.
Calculated -42.7861 in     7.56 ms on 4*1280000 array.
Calculated -42.7861 in     8.87 ms on 5*1024000 array.
Calculated -42.7861 in    13.61 ms on 8*640000 array.
Calculated -42.7861 in    15.28 ms on 10*512000 array.
Calculated -42.7861 in    19.33 ms on 16*320000 array.
Calculated -42.7861 in    19.01 ms on 20*256000 array.
Calculated -42.7861 in    17.77 ms on 25*204800 array.
Calculated -42.7861 in    23.82 ms on 32*160000 array.
Calculated -42.7861 in    13.16 ms on 40*128000 array.
Calculated -42.7861 in    11.28 ms on 50*102400 array.
Calculated -42.7861 in    26.13 ms on 64*80000 array.
Calculated -42.7861 in    16.10 ms on 80*64000 array.
Calculated -42.7861 in    10.80 ms on 100*51200 array.
Calculated -42.7861 in     8.94 ms on 125*40960 array.
Calculated -42.7861 in    27.05 ms on 128*40000 array.
Calculated -42.7861 in    11.65 ms on 160*32000 array.
Calculated -42.7861 in     9.01 ms on 200*25600 array.
Calculated -42.7861 in     9.59 ms on 250*20480 array.
Calculated -42.7861 in    29.98 ms on 256*20000 array.
Calculated -42.7861 in    15.61 ms on 320*16000 array.
Calculated -42.7861 in    14.89 ms on 400*12800 array.
Calculated -42.7861 in    17.57 ms on 500*10240 array.
Calculated -42.7861 in    28.69 ms on 512*10000 array.
Calculated -42.7861 in    18.82 ms on 625*8192 array.
Calculated -42.7861 in    23.51 ms on 640*8000 array.
Calculated -42.7861 in    19.01 ms on 800*6400 array.
Calculated -42.7861 in    19.09 ms on 1000*5120 array.
Calculated -42.7861 in    33.41 ms on 1024*5000 array.
Calculated -42.7861 in    19.87 ms on 1250*4096 array.
Calculated -42.7861 in    22.77 ms on 1280*4000 array.
Calculated -42.7861 in    19.82 ms on 1600*3200 array.
Calculated -42.7861 in    20.51 ms on 2000*2560 array.
Calculated -42.7861 in    33.26 ms on 2048*2500 array.
Calculated -42.7861 in    19.04 ms on 2500*2048 array.
Calculated -42.7861 in    22.68 ms on 2560*2000 array.
Calculated -42.7861 in    12.60 ms on 3200*1600 array.
Calculated -42.7861 in     9.10 ms on 4000*1280 array.
Calculated -42.7861 in    34.22 ms on 4096*1250 array.
Calculated -42.7861 in     7.99 ms on 5000*1024 array.
Calculated -42.7861 in    12.59 ms on 5120*1000 array.
Calculated -42.7861 in     8.62 ms on 6400*800 array.
Calculated -42.7861 in     7.32 ms on 8000*640 array.
Calculated -42.7861 in    32.28 ms on 8192*625 array.
Calculated -42.7861 in     7.69 ms on 10000*512 array.
Calculated -42.7861 in    12.18 ms on 10240*500 array.
Calculated -42.7861 in     8.70 ms on 12800*400 array.
Calculated -42.7861 in     7.91 ms on 16000*320 array.
Calculated -42.7861 in     7.75 ms on 20000*256 array.
Calculated -42.7861 in    13.01 ms on 20480*250 array.
Calculated -42.7861 in     8.88 ms on 25600*200 array.
Calculated -42.7861 in     7.42 ms on 32000*160 array.
Calculated -42.7861 in     7.60 ms on 40000*128 array.
Calculated -42.7861 in     9.38 ms on 40960*125 array.
Calculated -42.7861 in     8.80 ms on 51200*100 array.
Calculated -42.7861 in     8.11 ms on 64000*80 array.
Calculated -42.7861 in     5.09 ms on 80000*64 array.
Calculated -42.7861 in     8.12 ms on 102400*50 array.
Calculated -42.7861 in     5.61 ms on 128000*40 array.
Calculated -42.7861 in     5.04 ms on 160000*32 array.
Calculated -42.7861 in     5.51 ms on 204800*25 array.
Calculated -42.7861 in     5.93 ms on 256000*20 array.
Calculated -42.7861 in     6.02 ms on 320000*16 array.
Calculated -42.7861 in     6.09 ms on 512000*10 array.
Calculated -42.7861 in     5.18 ms on 640000*8 array.
Calculated -42.7861 in     5.13 ms on 1024000*5 array.
Calculated -42.7861 in     5.07 ms on 1280000*4 array.
Calculated -42.7861 in     5.13 ms on 2560000*2 array.
Calculated -42.7861 in     5.44 ms on 5120000*1 array.

row, with free:

danbik@asb9838nu-a08:~/Desktop/295lab/lab8$ ./a.out 5120000
Array size: 40000 kB
Calculated -42.7861 in     8.09 ms on 1*5120000 array.
Calculated -42.7861 in     5.55 ms on 2*2560000 array.
Calculated -42.7861 in     5.39 ms on 4*1280000 array.
Calculated -42.7861 in     5.42 ms on 5*1024000 array.
Calculated -42.7861 in     5.24 ms on 8*640000 array.
Calculated -42.7861 in     5.32 ms on 10*512000 array.
Calculated -42.7861 in     5.29 ms on 16*320000 array.
Calculated -42.7861 in     5.22 ms on 20*256000 array.
Calculated -42.7861 in     5.13 ms on 25*204800 array.
Calculated -42.7861 in     5.12 ms on 32*160000 array.
Calculated -42.7861 in     5.20 ms on 40*128000 array.
Calculated -42.7861 in     5.18 ms on 50*102400 array.
Calculated -42.7861 in     5.08 ms on 64*80000 array.
Calculated -42.7861 in     5.15 ms on 80*64000 array.
Calculated -42.7861 in     5.09 ms on 100*51200 array.
Calculated -42.7861 in     5.12 ms on 125*40960 array.
Calculated -42.7861 in     5.09 ms on 128*40000 array.
Calculated -42.7861 in     5.14 ms on 160*32000 array.
Calculated -42.7861 in     5.09 ms on 200*25600 array.
Calculated -42.7861 in     5.19 ms on 250*20480 array.
Calculated -42.7861 in     5.10 ms on 256*20000 array.
Calculated -42.7861 in     5.09 ms on 320*16000 array.
Calculated -42.7861 in     5.08 ms on 400*12800 array.
Calculated -42.7861 in     5.09 ms on 500*10240 array.
Calculated -42.7861 in     5.09 ms on 512*10000 array.
Calculated -42.7861 in     5.08 ms on 625*8192 array.
Calculated -42.7861 in     5.08 ms on 640*8000 array.
Calculated -42.7861 in     5.09 ms on 800*6400 array.
Calculated -42.7861 in     5.08 ms on 1000*5120 array.
Calculated -42.7861 in     5.08 ms on 1024*5000 array.
Calculated -42.7861 in     5.08 ms on 1250*4096 array.
Calculated -42.7861 in     5.09 ms on 1280*4000 array.
Calculated -42.7861 in     5.08 ms on 1600*3200 array.
Calculated -42.7861 in     5.08 ms on 2000*2560 array.
Calculated -42.7861 in     5.04 ms on 2048*2500 array.
Calculated -42.7861 in     5.18 ms on 2500*2048 array.
Calculated -42.7861 in     5.08 ms on 2560*2000 array.
Calculated -42.7861 in     5.02 ms on 3200*1600 array.
Calculated -42.7861 in     5.02 ms on 4000*1280 array.
Calculated -42.7861 in     4.98 ms on 4096*1250 array.
Calculated -42.7861 in     5.02 ms on 5000*1024 array.
Calculated -42.7861 in     5.14 ms on 5120*1000 array.
Calculated -42.7861 in     4.99 ms on 6400*800 array.
Calculated -42.7861 in     4.98 ms on 8000*640 array.
Calculated -42.7861 in     5.08 ms on 8192*625 array.
Calculated -42.7861 in     5.01 ms on 10000*512 array.
Calculated -42.7861 in     5.01 ms on 10240*500 array.
Calculated -42.7861 in     4.97 ms on 12800*400 array.
Calculated -42.7861 in     4.97 ms on 16000*320 array.
Calculated -42.7861 in     5.00 ms on 20000*256 array.
Calculated -42.7861 in     5.00 ms on 20480*250 array.
Calculated -42.7861 in     4.97 ms on 25600*200 array.
Calculated -42.7861 in     5.02 ms on 32000*160 array.
Calculated -42.7861 in     4.97 ms on 40000*128 array.
Calculated -42.7861 in     5.03 ms on 40960*125 array.
Calculated -42.7861 in     5.00 ms on 51200*100 array.
Calculated -42.7861 in     4.97 ms on 64000*80 array.
Calculated -42.7861 in     5.07 ms on 80000*64 array.
Calculated -42.7861 in     5.14 ms on 102400*50 array.
Calculated -42.7861 in     5.09 ms on 128000*40 array.
Calculated -42.7861 in     5.01 ms on 160000*32 array.
Calculated -42.7861 in     5.11 ms on 204800*25 array.
Calculated -42.7861 in     5.14 ms on 256000*20 array.
Calculated -42.7861 in     5.13 ms on 320000*16 array.
Calculated -42.7861 in     5.15 ms on 512000*10 array.
Calculated -42.7861 in     5.11 ms on 640000*8 array.
Calculated -42.7861 in     5.01 ms on 1024000*5 array.
Calculated -42.7861 in     5.05 ms on 1280000*4 array.
Calculated -42.7861 in     4.98 ms on 2560000*2 array.
Calculated -42.7861 in     4.98 ms on 5120000*1 array.

danbik@asb9838nu-d13:~/Desktop/295lab/lab8$ ./a.out
                   warmup calculated  103275238 in 151 ms
                   warmup calculated  103275238 in 148 ms
                   warmup calculated  103275238 in 148 ms
       hailstone_length_c calculated  103275238 in 149 ms
         hailstone_length calculated  103275238 in 151 ms
    hailstone_length_cmov calculated  103275238 in 130 ms
danbik@asb9838nu-d13:~/Desktop/295lab/lab8$ gcc -Wall -Wpedantic -std=c17 -march=haswell -O3 lab8.S tests.c
danbik@asb9838nu-d13:~/Desktop/295lab/lab8$ ./a.out
hailstone_length(1) == 0 == 0
hailstone_length(5) == 5 == 5
hailstone_length(20) == 7 == 7
hailstone_length(123) == 46 == 46
hailstone_length_cmov(1) == 0 == 0
hailstone_length_cmov(5) == 5 == 5
hailstone_length_cmov(20) == 7 == 7
hailstone_length_cmov(123) == 46 == 46